// flow-typed signature: 6b60a877debc22e9b88a7c4fb205d78d
// flow-typed version: <<STUB>>/eslint-plugin-unicorn_v^51.0.1/flow_v0.231.0

/**
 * This is an autogenerated libdef stub for:
 *
 *   'eslint-plugin-unicorn'
 *
 * Fill this stub out by replacing all the `any` types.
 *
 * Once filled out, we encourage you to share your work with the
 * community by sending a pull request to:
 * https://github.com/flowtype/flow-typed
 */

declare module 'eslint-plugin-unicorn' {
  declare module.exports: any;
}

/**
 * We include stubs for each file inside this npm package in case you need to
 * require those files directly. Feel free to delete any files that aren't
 * needed.
 */
declare module 'eslint-plugin-unicorn/configs/all' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/configs/flat-config-base' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/configs/legacy-config-base' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/configs/recommended' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/ast/call-or-new-expression' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/ast/function-types' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/ast' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/ast/is-arrow-function-body' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/ast/is-empty-node' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/ast/is-expression-statement' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/ast/is-function' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/ast/is-member-expression' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/ast/is-method-call' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/ast/is-reference-identifier' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/ast/is-static-require' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/ast/is-undefined' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/ast/literal' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/better-regex' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/catch-error-name' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/consistent-destructuring' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/consistent-function-scoping' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/custom-error-definition' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/empty-brace-spaces' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/error-message' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/escape-case' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/expiring-todo-comments' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/explicit-length-check' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/filename-case' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/fix/add-parenthesizes-to-return-or-throw-expression' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/fix/append-argument' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/fix/extend-fix-range' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/fix/fix-space-around-keywords' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/fix' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/fix/remove-argument' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/fix/remove-member-expression-property' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/fix/remove-method-call' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/fix/remove-parentheses' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/fix/remove-spaces-after' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/fix/rename-variable' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/fix/replace-argument' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/fix/replace-node-or-token-and-spaces-before' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/fix/replace-reference-identifier' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/fix/replace-string-literal' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/fix/replace-string-raw' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/fix/replace-template-element' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/fix/switch-call-expression-to-new-expression' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/fix/switch-new-expression-to-call-expression' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/import-style' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/new-for-builtins' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-abusive-eslint-disable' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-array-callback-reference' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-array-for-each' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-array-method-this-argument' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-array-push-push' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-array-reduce' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-await-expression-member' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-console-spaces' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-document-cookie' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-empty-file' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-for-loop' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-hex-escape' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-instanceof-array' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-invalid-remove-event-listener' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-keyword-prefix' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-lonely-if' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-negated-condition' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-nested-ternary' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-new-array' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-new-buffer' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-null' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-object-as-default-parameter' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-process-exit' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-static-only-class' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-thenable' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-this-assignment' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-typeof-undefined' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-unnecessary-await' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-unnecessary-polyfills' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-unreadable-array-destructuring' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-unreadable-iife' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-unused-properties' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-useless-fallback-in-spread' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-useless-length-check' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-useless-promise-resolve-reject' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-useless-spread' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-useless-switch-case' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-useless-undefined' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-zero-fractions' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/number-literal-case' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/numeric-separators-style' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-add-event-listener' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-array-find' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-array-flat-map' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-array-flat' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-array-index-of' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-array-some' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-at' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-blob-reading-methods' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-code-point' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-date-now' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-default-parameters' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-dom-node-append' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-dom-node-dataset' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-dom-node-remove' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-dom-node-text-content' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-event-target' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-export-from' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-includes' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-json-parse-buffer' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-keyboard-event-key' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-logical-operator-over-ternary' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-math-trunc' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-modern-dom-apis' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-modern-math-apis' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-module' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-native-coercion-functions' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-negative-index' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-node-protocol' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-number-properties' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-object-from-entries' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-optional-catch-binding' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-prototype-methods' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-query-selector' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-reflect-apply' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-regexp-test' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-set-has' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-set-size' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-spread' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-string-replace-all' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-string-slice' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-string-starts-ends-with' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-string-trim-start-end' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-switch' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-ternary' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-top-level-await' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-type-error' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prevent-abbreviations' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/relative-url-style' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/require-array-join-separator' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/require-number-to-fixed-digits-argument' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/require-post-message-target-origin' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/shared/abbreviations' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/shared/dom-events' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/shared/event-keys' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/shared/negative-index' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/shared/simple-array-search-rule' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/shared/typed-array' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/string-content' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/switch-case-braces' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/template-indent' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/text-encoding-identifier-case' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/throw-new-error' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/array-or-object-prototype-property' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/assert-token' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/avoid-capture' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/boolean' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/builtins' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/cartesian-product-samples' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/create-deprecated-rules' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/escape-string' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/escape-template-element-raw' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/get-ancestor' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/get-builtin-rule' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/get-call-expression-arguments-text' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/get-class-head-location' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/get-documentation-url' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/get-indent-string' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/get-previous-node' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/get-references' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/get-scopes' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/get-switch-case-head-location' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/get-variable-identifiers' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/global-reference-tracker' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/has-optional-chain-element' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/has-same-range' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/is-function-self-used-inside' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/is-left-hand-side' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/is-logical-expression' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/is-method-named' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/is-new-expression-with-parentheses' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/is-node-matches' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/is-node-value-not-dom-node' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/is-node-value-not-function' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/is-number' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/is-object-method' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/is-on-same-line' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/is-same-identifier' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/is-same-reference' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/is-shadowed' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/is-shorthand-export-local' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/is-shorthand-import-local' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/is-shorthand-property-assignment-pattern-left' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/is-shorthand-property-value' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/is-value-not-usable' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/lodash' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/needs-semicolon' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/numeric' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/parentheses' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/resolve-variable-name' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/rule' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/should-add-parentheses-to-conditional-expression-child' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/should-add-parentheses-to-expression-statement-expression' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/should-add-parentheses-to-logical-expression-child' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/should-add-parentheses-to-member-expression-object' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/should-add-parentheses-to-new-expression-callee' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/should-add-parentheses-to-spread-element-argument' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/singular' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/to-location' {
  declare module.exports: any;
}

// Filename aliases
declare module 'eslint-plugin-unicorn/configs/all.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/configs/all'>;
}
declare module 'eslint-plugin-unicorn/configs/flat-config-base.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/configs/flat-config-base'>;
}
declare module 'eslint-plugin-unicorn/configs/legacy-config-base.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/configs/legacy-config-base'>;
}
declare module 'eslint-plugin-unicorn/configs/recommended.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/configs/recommended'>;
}
declare module 'eslint-plugin-unicorn/index' {
  declare module.exports: $Exports<'eslint-plugin-unicorn'>;
}
declare module 'eslint-plugin-unicorn/index.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn'>;
}
declare module 'eslint-plugin-unicorn/rules/ast/call-or-new-expression.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/ast/call-or-new-expression'>;
}
declare module 'eslint-plugin-unicorn/rules/ast/function-types.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/ast/function-types'>;
}
declare module 'eslint-plugin-unicorn/rules/ast/index' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/ast'>;
}
declare module 'eslint-plugin-unicorn/rules/ast/index.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/ast'>;
}
declare module 'eslint-plugin-unicorn/rules/ast/is-arrow-function-body.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/ast/is-arrow-function-body'>;
}
declare module 'eslint-plugin-unicorn/rules/ast/is-empty-node.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/ast/is-empty-node'>;
}
declare module 'eslint-plugin-unicorn/rules/ast/is-expression-statement.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/ast/is-expression-statement'>;
}
declare module 'eslint-plugin-unicorn/rules/ast/is-function.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/ast/is-function'>;
}
declare module 'eslint-plugin-unicorn/rules/ast/is-member-expression.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/ast/is-member-expression'>;
}
declare module 'eslint-plugin-unicorn/rules/ast/is-method-call.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/ast/is-method-call'>;
}
declare module 'eslint-plugin-unicorn/rules/ast/is-reference-identifier.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/ast/is-reference-identifier'>;
}
declare module 'eslint-plugin-unicorn/rules/ast/is-static-require.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/ast/is-static-require'>;
}
declare module 'eslint-plugin-unicorn/rules/ast/is-undefined.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/ast/is-undefined'>;
}
declare module 'eslint-plugin-unicorn/rules/ast/literal.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/ast/literal'>;
}
declare module 'eslint-plugin-unicorn/rules/better-regex.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/better-regex'>;
}
declare module 'eslint-plugin-unicorn/rules/catch-error-name.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/catch-error-name'>;
}
declare module 'eslint-plugin-unicorn/rules/consistent-destructuring.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/consistent-destructuring'>;
}
declare module 'eslint-plugin-unicorn/rules/consistent-function-scoping.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/consistent-function-scoping'>;
}
declare module 'eslint-plugin-unicorn/rules/custom-error-definition.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/custom-error-definition'>;
}
declare module 'eslint-plugin-unicorn/rules/empty-brace-spaces.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/empty-brace-spaces'>;
}
declare module 'eslint-plugin-unicorn/rules/error-message.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/error-message'>;
}
declare module 'eslint-plugin-unicorn/rules/escape-case.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/escape-case'>;
}
declare module 'eslint-plugin-unicorn/rules/expiring-todo-comments.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/expiring-todo-comments'>;
}
declare module 'eslint-plugin-unicorn/rules/explicit-length-check.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/explicit-length-check'>;
}
declare module 'eslint-plugin-unicorn/rules/filename-case.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/filename-case'>;
}
declare module 'eslint-plugin-unicorn/rules/fix/add-parenthesizes-to-return-or-throw-expression.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/fix/add-parenthesizes-to-return-or-throw-expression'>;
}
declare module 'eslint-plugin-unicorn/rules/fix/append-argument.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/fix/append-argument'>;
}
declare module 'eslint-plugin-unicorn/rules/fix/extend-fix-range.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/fix/extend-fix-range'>;
}
declare module 'eslint-plugin-unicorn/rules/fix/fix-space-around-keywords.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/fix/fix-space-around-keywords'>;
}
declare module 'eslint-plugin-unicorn/rules/fix/index' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/fix'>;
}
declare module 'eslint-plugin-unicorn/rules/fix/index.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/fix'>;
}
declare module 'eslint-plugin-unicorn/rules/fix/remove-argument.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/fix/remove-argument'>;
}
declare module 'eslint-plugin-unicorn/rules/fix/remove-member-expression-property.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/fix/remove-member-expression-property'>;
}
declare module 'eslint-plugin-unicorn/rules/fix/remove-method-call.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/fix/remove-method-call'>;
}
declare module 'eslint-plugin-unicorn/rules/fix/remove-parentheses.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/fix/remove-parentheses'>;
}
declare module 'eslint-plugin-unicorn/rules/fix/remove-spaces-after.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/fix/remove-spaces-after'>;
}
declare module 'eslint-plugin-unicorn/rules/fix/rename-variable.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/fix/rename-variable'>;
}
declare module 'eslint-plugin-unicorn/rules/fix/replace-argument.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/fix/replace-argument'>;
}
declare module 'eslint-plugin-unicorn/rules/fix/replace-node-or-token-and-spaces-before.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/fix/replace-node-or-token-and-spaces-before'>;
}
declare module 'eslint-plugin-unicorn/rules/fix/replace-reference-identifier.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/fix/replace-reference-identifier'>;
}
declare module 'eslint-plugin-unicorn/rules/fix/replace-string-literal.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/fix/replace-string-literal'>;
}
declare module 'eslint-plugin-unicorn/rules/fix/replace-string-raw.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/fix/replace-string-raw'>;
}
declare module 'eslint-plugin-unicorn/rules/fix/replace-template-element.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/fix/replace-template-element'>;
}
declare module 'eslint-plugin-unicorn/rules/fix/switch-call-expression-to-new-expression.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/fix/switch-call-expression-to-new-expression'>;
}
declare module 'eslint-plugin-unicorn/rules/fix/switch-new-expression-to-call-expression.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/fix/switch-new-expression-to-call-expression'>;
}
declare module 'eslint-plugin-unicorn/rules/import-style.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/import-style'>;
}
declare module 'eslint-plugin-unicorn/rules/new-for-builtins.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/new-for-builtins'>;
}
declare module 'eslint-plugin-unicorn/rules/no-abusive-eslint-disable.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-abusive-eslint-disable'>;
}
declare module 'eslint-plugin-unicorn/rules/no-array-callback-reference.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-array-callback-reference'>;
}
declare module 'eslint-plugin-unicorn/rules/no-array-for-each.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-array-for-each'>;
}
declare module 'eslint-plugin-unicorn/rules/no-array-method-this-argument.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-array-method-this-argument'>;
}
declare module 'eslint-plugin-unicorn/rules/no-array-push-push.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-array-push-push'>;
}
declare module 'eslint-plugin-unicorn/rules/no-array-reduce.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-array-reduce'>;
}
declare module 'eslint-plugin-unicorn/rules/no-await-expression-member.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-await-expression-member'>;
}
declare module 'eslint-plugin-unicorn/rules/no-console-spaces.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-console-spaces'>;
}
declare module 'eslint-plugin-unicorn/rules/no-document-cookie.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-document-cookie'>;
}
declare module 'eslint-plugin-unicorn/rules/no-empty-file.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-empty-file'>;
}
declare module 'eslint-plugin-unicorn/rules/no-for-loop.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-for-loop'>;
}
declare module 'eslint-plugin-unicorn/rules/no-hex-escape.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-hex-escape'>;
}
declare module 'eslint-plugin-unicorn/rules/no-instanceof-array.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-instanceof-array'>;
}
declare module 'eslint-plugin-unicorn/rules/no-invalid-remove-event-listener.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-invalid-remove-event-listener'>;
}
declare module 'eslint-plugin-unicorn/rules/no-keyword-prefix.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-keyword-prefix'>;
}
declare module 'eslint-plugin-unicorn/rules/no-lonely-if.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-lonely-if'>;
}
declare module 'eslint-plugin-unicorn/rules/no-negated-condition.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-negated-condition'>;
}
declare module 'eslint-plugin-unicorn/rules/no-nested-ternary.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-nested-ternary'>;
}
declare module 'eslint-plugin-unicorn/rules/no-new-array.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-new-array'>;
}
declare module 'eslint-plugin-unicorn/rules/no-new-buffer.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-new-buffer'>;
}
declare module 'eslint-plugin-unicorn/rules/no-null.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-null'>;
}
declare module 'eslint-plugin-unicorn/rules/no-object-as-default-parameter.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-object-as-default-parameter'>;
}
declare module 'eslint-plugin-unicorn/rules/no-process-exit.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-process-exit'>;
}
declare module 'eslint-plugin-unicorn/rules/no-static-only-class.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-static-only-class'>;
}
declare module 'eslint-plugin-unicorn/rules/no-thenable.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-thenable'>;
}
declare module 'eslint-plugin-unicorn/rules/no-this-assignment.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-this-assignment'>;
}
declare module 'eslint-plugin-unicorn/rules/no-typeof-undefined.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-typeof-undefined'>;
}
declare module 'eslint-plugin-unicorn/rules/no-unnecessary-await.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-unnecessary-await'>;
}
declare module 'eslint-plugin-unicorn/rules/no-unnecessary-polyfills.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-unnecessary-polyfills'>;
}
declare module 'eslint-plugin-unicorn/rules/no-unreadable-array-destructuring.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-unreadable-array-destructuring'>;
}
declare module 'eslint-plugin-unicorn/rules/no-unreadable-iife.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-unreadable-iife'>;
}
declare module 'eslint-plugin-unicorn/rules/no-unused-properties.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-unused-properties'>;
}
declare module 'eslint-plugin-unicorn/rules/no-useless-fallback-in-spread.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-useless-fallback-in-spread'>;
}
declare module 'eslint-plugin-unicorn/rules/no-useless-length-check.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-useless-length-check'>;
}
declare module 'eslint-plugin-unicorn/rules/no-useless-promise-resolve-reject.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-useless-promise-resolve-reject'>;
}
declare module 'eslint-plugin-unicorn/rules/no-useless-spread.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-useless-spread'>;
}
declare module 'eslint-plugin-unicorn/rules/no-useless-switch-case.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-useless-switch-case'>;
}
declare module 'eslint-plugin-unicorn/rules/no-useless-undefined.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-useless-undefined'>;
}
declare module 'eslint-plugin-unicorn/rules/no-zero-fractions.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-zero-fractions'>;
}
declare module 'eslint-plugin-unicorn/rules/number-literal-case.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/number-literal-case'>;
}
declare module 'eslint-plugin-unicorn/rules/numeric-separators-style.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/numeric-separators-style'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-add-event-listener.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-add-event-listener'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-array-find.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-array-find'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-array-flat-map.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-array-flat-map'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-array-flat.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-array-flat'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-array-index-of.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-array-index-of'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-array-some.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-array-some'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-at.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-at'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-blob-reading-methods.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-blob-reading-methods'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-code-point.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-code-point'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-date-now.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-date-now'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-default-parameters.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-default-parameters'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-dom-node-append.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-dom-node-append'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-dom-node-dataset.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-dom-node-dataset'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-dom-node-remove.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-dom-node-remove'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-dom-node-text-content.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-dom-node-text-content'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-event-target.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-event-target'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-export-from.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-export-from'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-includes.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-includes'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-json-parse-buffer.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-json-parse-buffer'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-keyboard-event-key.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-keyboard-event-key'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-logical-operator-over-ternary.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-logical-operator-over-ternary'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-math-trunc.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-math-trunc'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-modern-dom-apis.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-modern-dom-apis'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-modern-math-apis.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-modern-math-apis'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-module.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-module'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-native-coercion-functions.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-native-coercion-functions'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-negative-index.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-negative-index'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-node-protocol.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-node-protocol'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-number-properties.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-number-properties'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-object-from-entries.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-object-from-entries'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-optional-catch-binding.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-optional-catch-binding'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-prototype-methods.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-prototype-methods'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-query-selector.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-query-selector'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-reflect-apply.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-reflect-apply'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-regexp-test.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-regexp-test'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-set-has.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-set-has'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-set-size.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-set-size'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-spread.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-spread'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-string-replace-all.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-string-replace-all'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-string-slice.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-string-slice'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-string-starts-ends-with.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-string-starts-ends-with'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-string-trim-start-end.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-string-trim-start-end'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-switch.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-switch'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-ternary.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-ternary'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-top-level-await.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-top-level-await'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-type-error.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-type-error'>;
}
declare module 'eslint-plugin-unicorn/rules/prevent-abbreviations.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prevent-abbreviations'>;
}
declare module 'eslint-plugin-unicorn/rules/relative-url-style.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/relative-url-style'>;
}
declare module 'eslint-plugin-unicorn/rules/require-array-join-separator.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/require-array-join-separator'>;
}
declare module 'eslint-plugin-unicorn/rules/require-number-to-fixed-digits-argument.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/require-number-to-fixed-digits-argument'>;
}
declare module 'eslint-plugin-unicorn/rules/require-post-message-target-origin.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/require-post-message-target-origin'>;
}
declare module 'eslint-plugin-unicorn/rules/shared/abbreviations.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/shared/abbreviations'>;
}
declare module 'eslint-plugin-unicorn/rules/shared/dom-events.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/shared/dom-events'>;
}
declare module 'eslint-plugin-unicorn/rules/shared/event-keys.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/shared/event-keys'>;
}
declare module 'eslint-plugin-unicorn/rules/shared/negative-index.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/shared/negative-index'>;
}
declare module 'eslint-plugin-unicorn/rules/shared/simple-array-search-rule.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/shared/simple-array-search-rule'>;
}
declare module 'eslint-plugin-unicorn/rules/shared/typed-array.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/shared/typed-array'>;
}
declare module 'eslint-plugin-unicorn/rules/string-content.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/string-content'>;
}
declare module 'eslint-plugin-unicorn/rules/switch-case-braces.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/switch-case-braces'>;
}
declare module 'eslint-plugin-unicorn/rules/template-indent.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/template-indent'>;
}
declare module 'eslint-plugin-unicorn/rules/text-encoding-identifier-case.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/text-encoding-identifier-case'>;
}
declare module 'eslint-plugin-unicorn/rules/throw-new-error.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/throw-new-error'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/array-or-object-prototype-property.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/array-or-object-prototype-property'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/assert-token.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/assert-token'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/avoid-capture.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/avoid-capture'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/boolean.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/boolean'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/builtins.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/builtins'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/cartesian-product-samples.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/cartesian-product-samples'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/create-deprecated-rules.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/create-deprecated-rules'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/escape-string.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/escape-string'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/escape-template-element-raw.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/escape-template-element-raw'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/get-ancestor.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/get-ancestor'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/get-builtin-rule.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/get-builtin-rule'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/get-call-expression-arguments-text.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/get-call-expression-arguments-text'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/get-class-head-location.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/get-class-head-location'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/get-documentation-url.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/get-documentation-url'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/get-indent-string.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/get-indent-string'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/get-previous-node.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/get-previous-node'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/get-references.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/get-references'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/get-scopes.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/get-scopes'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/get-switch-case-head-location.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/get-switch-case-head-location'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/get-variable-identifiers.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/get-variable-identifiers'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/global-reference-tracker.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/global-reference-tracker'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/has-optional-chain-element.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/has-optional-chain-element'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/has-same-range.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/has-same-range'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/index' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/index.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/is-function-self-used-inside.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/is-function-self-used-inside'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/is-left-hand-side.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/is-left-hand-side'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/is-logical-expression.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/is-logical-expression'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/is-method-named.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/is-method-named'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/is-new-expression-with-parentheses.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/is-new-expression-with-parentheses'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/is-node-matches.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/is-node-matches'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/is-node-value-not-dom-node.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/is-node-value-not-dom-node'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/is-node-value-not-function.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/is-node-value-not-function'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/is-number.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/is-number'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/is-object-method.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/is-object-method'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/is-on-same-line.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/is-on-same-line'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/is-same-identifier.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/is-same-identifier'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/is-same-reference.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/is-same-reference'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/is-shadowed.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/is-shadowed'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/is-shorthand-export-local.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/is-shorthand-export-local'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/is-shorthand-import-local.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/is-shorthand-import-local'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/is-shorthand-property-assignment-pattern-left.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/is-shorthand-property-assignment-pattern-left'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/is-shorthand-property-value.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/is-shorthand-property-value'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/is-value-not-usable.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/is-value-not-usable'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/lodash.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/lodash'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/needs-semicolon.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/needs-semicolon'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/numeric.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/numeric'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/parentheses.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/parentheses'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/resolve-variable-name.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/resolve-variable-name'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/rule.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/rule'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/should-add-parentheses-to-conditional-expression-child.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/should-add-parentheses-to-conditional-expression-child'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/should-add-parentheses-to-expression-statement-expression.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/should-add-parentheses-to-expression-statement-expression'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/should-add-parentheses-to-logical-expression-child.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/should-add-parentheses-to-logical-expression-child'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/should-add-parentheses-to-member-expression-object.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/should-add-parentheses-to-member-expression-object'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/should-add-parentheses-to-new-expression-callee.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/should-add-parentheses-to-new-expression-callee'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/should-add-parentheses-to-spread-element-argument.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/should-add-parentheses-to-spread-element-argument'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/singular.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/singular'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/to-location.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/to-location'>;
}
